<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="WrappableList" Id="{ca08b2fb-2d23-4b3e-81bb-a2facb2a8425}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK WrappableList
VAR_INPUT
END_VAR
VAR_OUTPUT
	count : UINT;
	_typeClass : __SYSTEM.TYPE_CLASS; // Type of data object - primitives or Userdef
	_classSize : DINT; // Size of data object - useful to check type of Userdef typeclass
END_VAR
VAR
	head : POINTER TO Node := NULL;
	tail : POINTER TO Node := NULL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

]]></ST>
    </Implementation>
    <Method Name="_Append" Id="{40e96914-b8be-4eb1-83bd-e01089932ae8}">
      <Declaration><![CDATA[METHOD PROTECTED _Append : REFERENCE TO WrappableList
VAR_INPUT
	data : ANY;
END_VAR
VAR
	new : POINTER TO Node;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Append REF= THIS^;

IF NOT IsTypeClassCorrect(data) THEN
	RETURN;
END_IF
SetTypeClass(data);

new := __NEW(Node);
new^.data := __NEW(BYTE, classSize);
MEMCPY(new^.data, data.pValue, classSize);
new^.next := NULL;

IF head = NULL THEN
	head := new;
	tail := new;
ELSE
	tail^.next := new;
	tail := tail^.next;
END_IF
count := count + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_Get" Id="{c2722b16-7c99-41ac-a740-753b89560dea}">
      <Declaration><![CDATA[
METHOD PROTECTED _Get : REFERENCE TO WrappableList
VAR_INPUT
	// indexing from end allowed
	// index = 0 returns first element
	// index = 1 returns seconds element
	// index = -1 returns last element
	// index = -2 return before-last element
	index : INT;
	destinationVariable : ANY;
END_VAR
VAR
	current : POINTER TO Node := NULL;
	getIndex : INT;
	i : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT IsTypeClassCorrect(destinationVariable) THEN
	RETURN;
END_IF;

IF head = NULL THEN
	RETURN;
END_IF;

// Calculate actual index in List
getIndex := (count * BOOL_TO_INT(index < 0)) + index;

// Return 0 for invalid indexes
IF 	(getIndex >= count) OR	// Indexing from begin begins with 0
	(getIndex < 0) // Indexing from end begins with -1
THEN
	RETURN;
END_IF


current := head;
FOR i := 1 TO getIndex DO // we already got head in previous line, that's why it's from 1
	IF current^.next = NULL THEN
		RETURN;
	END_IF
	current := current^.next;
END_FOR
MEMMOVE(destinationVariable.pValue, current^.data, classSize);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_GetPointer" Id="{bbe04a9a-a9e8-4663-8df7-f603916e74f3}">
      <Declaration><![CDATA[
METHOD _GetPointer : PointerToByteQueryable
VAR_INPUT
	index : INT;
END_VAR
VAR
	current : POINTER TO Node := NULL;
	getIndex : INT;
	i : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF head = NULL THEN
	RETURN;
END_IF;

// Calculate actual index in List
getIndex := (count * BOOL_TO_INT(index < 0)) + index;

// Return 0 for invalid indexes
IF 	(getIndex >= count) OR	// Indexing from begin begins with 0
	(getIndex < 0) // Indexing from end begins with -1
THEN
	RETURN;
END_IF


current := head;
FOR i := 1 TO getIndex DO // we already got head in previous line, that's why it's from 1
	IF current^.next = NULL THEN
		RETURN;
	END_IF
	current := current^.next;
END_FOR
_GetPointer.pt := current^.data;
https://infosys.beckhoff.com/english.php?content=../content/1033/tc3_plc_intro/2529453451.html&id=]]></ST>
      </Implementation>
    </Method>
    <Property Name="classSize" Id="{472807a7-4887-42a4-9772-3a0fa6f7a368}">
      <Declaration><![CDATA[
//{attribute 'monitoring' := 'call'}
// Size of data object - useful to check type of Userdef typeclass
PROPERTY classSize : DINT
]]></Declaration>
      <Get Name="Get" Id="{11a13790-f3d1-42c8-bed6-f7e32953bc59}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
classSize := _classSize;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{607e393b-3979-4efc-8fe4-6059ba11c1c7}">
        <Declaration><![CDATA[
PRIVATE 
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
_classSize := classSize;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Insert" Id="{dc1fed3d-f702-4622-bcf1-8e347a9d306e}">
      <Declaration><![CDATA[// Inserts new element into given index. Negative indexing is supported
METHOD Insert : REFERENCE TO WrappableList
VAR_INPUT
	(*
		0 = Prepend;
		1 = Insert into second position;
		-2 = Insert into second position from end;
		-1 = Append;
	*)
	index : INT;
	data : ANY;
END_VAR
VAR
	new : POINTER TO Node;
	current : POINTER TO Node;
	insertIndex : INT;
	i : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Insert REF= THIS^;

IF NOT IsTypeClassCorrect(data) THEN
	RETURN;
END_IF
SetTypeClass(data);

new := __NEW(Node);
new^.data := __NEW(BYTE, classSize);
MEMCPY(new^.data, data.pValue, classSize);

// Calculate actual index in List
insertIndex := ((count + 1) * BOOL_TO_INT(index < 0)) + index;

IF insertIndex >= count // Index too high -> append to end
THEN
	_Append(data);
	RETURN;
ELSIF insertIndex <= 0 // Index too high from the end -> prepend to beginning
THEN
	Prepend(data);
	RETURN;
END_IF

current := head;
FOR i := 1 TO insertIndex - 1 DO
	current := current^.next;
END_FOR
new^.next := current^.next;
current^.next := new;
count := count + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsEmpty" Id="{effa7d14-2ac9-4336-9502-f0e2f8f66119}">
      <Declaration><![CDATA[
METHOD IsEmpty : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IsEmpty := head = NULL;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsTypeClassCorrect" Id="{57ad85de-1bf2-4568-88e8-b597de22c725}">
      <Declaration><![CDATA[
METHOD IsTypeClassCorrect : BOOL
VAR_INPUT
	CheckedVariable : ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF classSize = 0 THEN
	IsTypeClassCorrect := TRUE;
	RETURN;
END_IF
IsTypeClassCorrect := typeClass = CheckedVariable.TypeClass AND classSize = CheckedVariable.diSize;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Prepend" Id="{a005bd10-c0a4-428e-b47d-b3a0bae09a55}">
      <Declaration><![CDATA[
// Pushes data to the beginning of the list
METHOD Prepend : REFERENCE TO WrappableList
VAR_INPUT
	data : ANY;
END_VAR
VAR
	new : POINTER TO Node;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Prepend REF= THIS^;

IF NOT IsTypeClassCorrect(data) THEN
	RETURN;
END_IF
SetTypeClass(data);

new := __NEW(Node);
new^.data := __NEW(BYTE, classSize);
MEMCPY(new^.data, data.pValue, classSize);
new^.next := head;

IF head = NULL THEN
	head := new;
	tail := new;
ELSE
	head := new;
END_IF
count := count + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{86e69ae2-79e1-49a0-be8b-fbc89ffa93eb}">
      <Declaration><![CDATA[
METHOD Remove : REFERENCE TO WrappableList;
VAR_INPUT
	index : INT;
END_VAR
VAR
	current : POINTER TO Node := NULL;
	removeIndex : INT;	
	nodeToRemove : POINTER TO Node;
	i : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Remove REF= THIS^;

IF head = NULL THEN
	RETURN;
END_IF;

// Calculate actual index in List
removeIndex := (count * BOOL_TO_INT(index < 0)) + index; 

// Cancel removal for invalid indexes
IF 	(removeIndex >= count) OR // Indexing from begin begins with 0
	(removeIndex < 0) // Indexing from end begins with -1
THEN
	RETURN;
END_IF

IF removeIndex = 0 THEN
	nodeToRemove := head;
	head := head^.next;
ELSE
	current := head;
	FOR i := 1 TO removeIndex - 1 DO
		current := current^.next;
	END_FOR
	nodeToRemove := current^.next;
	current^.next := current^.next^.next;
END_IF
IF nodeToRemove = tail THEN
	tail := current;
END_IF
__DELETE(nodeToRemove^.data);
__DELETE(nodeToRemove);
count := count - 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAll" Id="{7b77c637-bdf7-4ab8-b391-bbc2186a0a44}">
      <Declaration><![CDATA[
METHOD RemoveAll : REFERENCE TO WrappableList
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
WHILE head <> NULL DO
	Remove(0);
END_WHILE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetTypeClass" Id="{1bd4d152-eddc-424a-a539-895a22ed9f1e}">
      <Declaration><![CDATA[
METHOD SetTypeClass : BOOL
VAR_INPUT
	ReferenceVariable : ANY; // Pass any variable of your chosen type. It will only be used to obtain data type
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF classSize = 0 THEN
	typeClass := ReferenceVariable.TypeClass;
	classSize := ReferenceVariable.diSize;
	SetTypeClass := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="typeClass" Id="{47310767-7ddb-473e-ae58-91644eca8bba}">
      <Declaration><![CDATA[
//{attribute 'monitoring' := 'call'}
// Type of data object - primitives or Userdef
PROPERTY typeClass : __SYSTEM.TYPE_CLASS
]]></Declaration>
      <Get Name="Get" Id="{6e72db4f-0187-4d25-9772-2f57b7c9c04e}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
typeClass := _typeClass;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{276b8d61-c05d-441f-baa7-50c671d7c0fa}">
        <Declaration><![CDATA[
PRIVATE 
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
_typeClass := typeClass;
]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>